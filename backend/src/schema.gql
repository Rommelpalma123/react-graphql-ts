# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Account model"""
type Account {
  descripcion: String!
  id_cliente: ID!
}

"""City model"""
type City {
  id_pais: ID!
  nombre: String!
}

"""Client model"""
type Client {
  cedula: String!
  edad: String!
  email: String!
  id_pais: Country!
  nombre: String!
  password: String!
}

"""Country model"""
type Country {
  nombre: String!
}

input CreateAccountInput {
  descripcion: String!
  id_cliente: CreateClientInput!
}

input CreateCityInput {
  id_pais: ID!
  nombre: String!
}

input CreateClientInput {
  cedula: String!
  edad: String!
  email: String!
  id_pais: CreateCountryInput!
  nombre: String!
  password: String!
}

input CreateCountryInput {
  nombre: String!
}

input CreateProcedureInput {
  costo: Float!
  descripcion: String!
}

input CreateRegisterInput {
  fecha: DateTime!
  id_cliente: ID!
  id_tramite: ID!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
  phone: String!
  surname: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Mutation {
  createAccount(createAccount: CreateAccountInput!): Account!
  createCity(createCity: CreateCityInput!): City!
  createClient(createClient: CreateClientInput!): Client!
  createCountry(createCountry: CreateCountryInput!): Country!
  createProcedure(createProcedure: CreateProcedureInput!): Procedure!
  createRegister(createRegister: CreateRegisterInput!): Register!
  createUser(createUser: CreateUserInput!): User!
  deleleAccount(id: String!): Account!
  deleleCity(id: String!): City!
  deleleClient(id: String!): Client!
  deleleCountry(id: String!): Country!
  deleleProcedure(id: String!): Procedure!
  deleleRegister(id: String!): Register!
  deleleUser(id: String!): User!
  login(email: String!, password: String!): Client!
  updateAccount(id: String!, updateAccountInput: UpdateAccountInput!): Account!
  updateCity(id: String!, updateCityInput: UpdateCityInput!): City!
  updateClient(id: String!, updateClienttInput: UpdateClientInput!): Client!
  updateCountry(id: String!, updateCountryInput: UpdateCountryInput!): Country!
  updateProcedure(id: String!, updateProcedureInput: UpdateProcedureInput!): Procedure!
  updateRegister(id: String!, updateRegisterInput: UpdateRegisterInput!): Register!
  updateUser(id: String!, updateUserInput: UpdateUserInput!): User!
}

"""Procedure model"""
type Procedure {
  costo: Float!
  descripcion: String!
}

type Query {
  allAccounts: [Account!]!
  allCities: [City!]!
  allClient: [Client!]!
  allCountry: [Country!]!
  allProcedure: [Procedure!]!
  allRegister: [Register!]!
  allUser: [User!]!
  findAccountById(id: String!): Account!
  findCityById(id: String!): City!
  findClientById(id: String!): Client!
  findCountryById(id: String!): Country!
  findProcedureById(id: String!): Procedure!
  findRegisterById(id: String!): Register!
  findUserBiId(id: String!): User!
}

"""Register model"""
type Register {
  fecha: DateTime!
  id_cliente: ID!
  id_tramite: ID!
}

input UpdateAccountInput {
  descripcion: String!
}

input UpdateCityInput {
  id_pais: ID!
  nombre: String!
}

input UpdateClientInput {
  cedula: String!
  edad: String!
  id_pais: String!
  nombre: String!
}

input UpdateCountryInput {
  nombre: String!
}

input UpdateProcedureInput {
  costo: String!
  descripcion: String!
}

input UpdateRegisterInput {
  fecha: String!
  id_cliente: ID!
  id_tramite: ID!
}

input UpdateUserInput {
  email: String!
  id: ID!
  name: String!
  phone: String!
  surname: String!
}

"""User model"""
type User {
  email: String!
  id: ID!
  name: String!
  password: String!
  phone: String!
  surname: String!
}